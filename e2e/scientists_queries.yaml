---
name: scientists
queries:
  - query: relativ-star-scientists
    solutions:
      - type: text
        sparql: |
          SELECT ?x SCORE(?t) TEXT(?t) WHERE {
              ?x <is-a> <Scientist> .
              ?t ql:contains-entity ?x .
              ?t ql:contains-word "relati*"
          }
          ORDER BY DESC(SCORE(?t))
        checks:
          - num_cols: 3
          - num_rows: 1653
          - selected: ["?x", "SCORE(?t)", "TEXT(?t)"]
            # null cells are ignored
          - contains_row: ["<Albert_Einstein>", null, null]
          - contains_row: ["<Luís_Lindley_Cintra>", null, null] # Test Unicode
          - order_numeric: {"dir" : "DESC", "var": "SCORE(?t)"}
  - query: algo-star-female-scientists
    solutions:
      - type: text
        sparql: |
          SELECT ?x SCORE(?t) WHERE {
              ?x <is-a> <Scientist> .
              ?x <Gender> <Female> .
              ?t ql:contains-entity ?x .
              ?t ql:contains-word "algo*"
          }
          ORDER BY DESC(SCORE(?t))
        checks:
          - num_cols: 2
          - num_rows: 11
          - selected: ["?x", "SCORE(?t)"]
          - contains_row: ["<Grete_Hermann>"]
          - order_numeric: {"dir": "DESC", "var" : "SCORE(?t)"}
  - query: scientists-from-new-york
    solutions:
      - type: no-text
        sparql: |
          SELECT ?x WHERE {
              ?x <is-a> <Scientist> .
              ?x <Place_of_birth> <New_York_City>
          }
        checks:
          - num_cols: 1
          - num_rows: 280
          - selected: ["?x"]
          - contains_row: ["<Andrew_S._Tanenbaum>"]
  - query: scientists-married-to-scientists
    solutions:
      - type: no-text
        sparql: |
          SELECT ?x ?y WHERE {
              ?x <is-a> <Scientist> .
              ?x <Spouse_(or_domestic_partner)> ?y .
              ?y <is-a> <Scientist> .
              FILTER(?x < ?y) .
          } ORDER BY ASC(?x)
        checks:
          - num_cols: 2
          - num_rows: 97
          - selected: ["?x", "?y"]
          - contains_row: ["<Albert_Einstein>", "<Mileva_Marić>"]
          - order_string: {"dir": "ASC", "var": "?x"}
  - query: scientists-count-group-by-place-of-birth
    solutions:
      - type: no-text
        sparql: |
          SELECT (COUNT(?x) as ?count) ?place WHERE {
              ?x <is-a> <Scientist> .
              ?x <Place_of_birth> ?place .
          }
          GROUP BY ?place
          ORDER BY DESC(?count)
        checks:
          - num_cols: 2
          # -num_rows: 5295 # greater than current limit
          - selected: ["?count", "?place"]
          - contains_row: [280, "<New_York_City>"]
          - order_numeric: {"dir": "DESC", "var": "?count"}
  - query: scientists-order-by-aggregate-count
    solutions:
      - type: no-text
        sparql: |
          SELECT ?place ?count WHERE {
              ?x <is-a> <Scientist> .
              ?x <Place_of_birth> ?place .
          }
          GROUP BY ?place
          ORDER BY DESC((COUNT(?x) as ?count))
        checks:
          - num_cols: 1
          - num_rows: 1 
          - selected: ["?place"]
          - order_numeric: {"dir": "DESC", "var": "?count"}
  - query: scientists-order-by-aggregate-avg
    solutions:
      - type: no-text
        sparql: |
          SELECT ?profession ?avg WHERE  {
            ?x <is-a> <Scientist> .
            ?x <Profession> ?profession .
            ?x <Height> ?height .
          }
          GROUP BY ?profession
          ORDER BY ASC((AVG(?height) as ?avg))
          LIMIT 1
        checks:
          - num_cols: 1 
          - num_rows: 1 
          - selected: ["?profession"]
          - order_numeric: {"dir": "ASC", "var": "?count"}
  - query: group-by-profession-average-height
    solutions:
      - type: no-text
        sparql: |
          SELECT (AVG(?height) as ?avg) ?profession WHERE {
              ?x <is-a> ?profession .
              ?x <Height> ?height .
          }
          GROUP BY ?profession
          ORDER BY DESC(?avg)
        checks:
          - num_cols: 2
          - num_rows: 312
          - selected: ["?avg", "?profession"]
          - contains_row: [null, "<Architect>"]
          - order_numeric: {"dir": "DESC", "var": "?avg"}
  - query: person-order-by-height
    solutions:
      - type: no-text
        sparql: |
          SELECT ?person ?height WHERE {
              ?person <is-a> <Person> .
              ?person <Height> ?height .
          }
          ORDER BY DESC(?height)
        checks:
          - order_numeric: {"dir": "DESC", "var": "?height"}
  - query: group-by-gender-average-height
    solutions:
      - type: no-text
        sparql: |
          SELECT (AVG(?height) as ?avg) ?gender WHERE {
              ?x <is-a> <Person> .
              ?x <Gender> ?gender .
              ?x <Height> ?height .
          }
          GROUP BY ?gender
          ORDER BY DESC(?avg)
        checks:
          - num_rows: 2
          - num_cols: 2
          - selected: ["?avg", "?gender"]
          # Float values are only compared to limited precision
          - res: [[1.8, "<Male>"], [1.7, "<Female>"]]
          - order_numeric: {"dir": "DESC", "var": "?avg"}
  - query : pattern-trick
    solutions:
      - type: no-text
        sparql: |
          SELECT ?r (COUNT(?r) as ?count) WHERE {
            ?a <is-a> <Scientist> .
            ?a ql:has-predicate ?r .
          }
          GROUP BY ?r
          ORDER BY DESC(?count)
        checks:
          - num_rows: 156
          - num_cols: 2
          - selected: ["?r", "?count"]
          - contains_row: ["<Religion>", 1185]
          - order_numeric: {"dir": "DESC", "var": "?count"}
  - query : has-predicate-full 
    solutions:
      - type: no-text
        sparql: |
          SELECT ?entity ?relation WHERE {
            ?entity ql:has-predicate ?relation .
          }
        checks:
          # The number o rows is greater than the current limit of 4096.
          # - num_rows: 168444
          - num_cols: 2
          - selected: ["?entity", "?relation"]
          - contains_row: ["<Alan_Fersht>", "<Leader_of>"]
  - query : has-predicate-subquery-subject
    solutions:
      - type: no-text
        sparql: |
          SELECT ?entity ?r WHERE {
            ?entity <is-a> <Profession> .
            ?entity ql:has-predicate ?r.
          }
        checks:
          - num_rows: 760
          - num_cols: 2
          - selected: ["?entity", "?r"]
          - contains_row: ["<Geographer>", "<Profession>"]
