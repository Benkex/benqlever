Thoughts on open TODOS:

TODO: Evaluate filters as early as possible.
- A filter with one variable is essentially another relation on that var.
- A filter with two variables will be applied as soon as both nodes are collapsed
Right now Filters with two varibales are implemented but they are processed in the end.
This is possibly not optimal. Think of:

?x mother ?m
?y mother ?m
?x super-large-name-relation ?name1
?y super-large-name-relation ?name2
FILTER(?x != ?y)

with the name relation having multiple names for each entity.
processing the filter earlier would be much, much better.


Non-tree queries are solved by identifying circles and then removing an edge.
Open: the smallest or largest relation? Probably the largest to keep the small-first pattern for joins.


---

On OCCURS_WITH:

?x occurs-with word1 word2 ?y ?z is not so easy:

cannot easily be transformed into an edge
 	subject --predicate-- object
like other relations could.

I THINK: it can be reversed. At least we do something like that in Broccoli.

Especially, because
?x occurs-with word
is also a thing.

Solution:
                  ?y
                 /
?x -- [word1 word2]
                 \
                  ?z

Problem #1:
This is not really reflected in a syntax like occurs-with (words vars).
The graphical representation (and syntax variations like "text-occurrence")
do not reflect the fact that ?x ?y ?z have to occur in the same context, though.



ALTERNATIVE:

      ?y
       |
?x -- ?c -- "word1 word2"
       |
       ?z

BENEFIT: Works very well with SELECT EXCERPT(?c)
NEXT BENEFIT:
Would have other relations to CIDs
DRAWBACK 1: Possible many c-ids carried through query. Solution: Limit them.
DRAWBACK: very weird semantics. When collapsing tree, words should be first,
but actually two of the three variables have to be computed first and then
words are used as entry point for co-occurring entities.

ALTERNATIVE2:

      ?y
       |
?x -- ?c [word1 word2]
       |
       ?z

FOR THE SIMPLE CASE

?x -- ?c [word]

SOLUTION: no longer as weired semantics.
need to collapse the smallest subtrees behind the variable first,
then use the words as extra info during the final consume.

PROBLEM:
Unclear if ?c will get consumed by the last variable
or the other way round. Broccoli-Style it should never be all vars into ?c...
but the first 2 vars HAVE to go into c.

SOLUTION?????:
Make it so context nodes get consumed as early as possible.
Does not help in o/w is the last edge and the question is in which direction
to collapse. Better to look at nodes then and identify context nodes.

General Problem with o/w:

In Broccoli, matches were only so many. Here, for matching contexts,
a cross-product has to be built.
HARD: This might add the same tuple multiple times
(for multiple matching contexts)

BIG BENEFIT:
Can add stuff like FILTER(?x != ?y) and FINALLY answer ?x friend* ?y queries
properly!!!
